/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

import org.opensearch.gradle.test.RestIntegTestTask

apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'opensearch.internal-cluster-test'

opensearchplugin {
  name 'flat-object'
  description 'Experimental flat-object support'
  classname 'org.opensearch.flatobject.FlatObjectPlugin'
  licenseFile rootProject.file('licenses/APACHE-LICENSE-2.0.txt')
  noticeFile rootProject.file('NOTICE.txt')
}

//test.enabled = false

restResources {
  restApi {
    includeCore '_common', 'indices', 'index', 'search'
  }
}

/**
 * This block and "RestIntegTestTask" package import need to be removed before we merge the plugin to upstream.
 *
 * This block was added to allow for local testing of the plugin by deploying it into testcluster ("./gradlew run").
 * However, it causes GitHub CI to fail due to:
 * ---
 * > Task :plugins:flat-object:testingConventions FAILED
 * Expected at least one test class included in task :plugins:flat-object:integTest, but found none.
 *
 * FAILURE: Build failed with an exception.
 *
 *  * What went wrong:
 *  Execution failed for task ':plugins:flat-object:testingConventions'.
 *  > Testing conventions [Expected at least one test class included in task :plugins:flat-object:integTest, but found none.] are not honored
 * ---
 * The workaround was to make it conditional so that it is on included in CI run.
 * This means that local testing now needs to be called like this:
 * ---
 * ./gradle -PisLocal run
 * ---
 */
if (project.hasProperty("isLocal")) {

  task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
  }
  tasks.named("check").configure { dependsOn(integTest) }

  integTest {
    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
      jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
  }

  testClusters.integTest {
    testDistribution = "INTEG_TEST"

    // This installs our plugin into the testClusters
    plugin(project.tasks.bundlePlugin.archiveFile)
  }

  // Uncommend the following if you want to spin up testcluster with more than one node.
  //testClusters.all {
  //  numberOfNodes = 2
  //}

  run {
    useCluster testClusters.integTest
  }

}
