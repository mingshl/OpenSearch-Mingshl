/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

package org.opensearch.flatobject.mapper;

import org.apache.lucene.document.FieldType;
import org.apache.lucene.index.IndexOptions;
import org.apache.lucene.search.Query;
import org.opensearch.index.mapper.FieldMapper;
import org.opensearch.index.mapper.MappedFieldType;
import org.opensearch.index.mapper.Mapper;
import org.opensearch.index.mapper.MapperParsingException;
import org.opensearch.index.mapper.ParseContext;
import org.opensearch.index.mapper.SimpleMappedFieldType;
import org.opensearch.index.mapper.TextSearchInfo;
import org.opensearch.index.mapper.ValueFetcher;
import org.opensearch.index.query.QueryShardContext;
import org.opensearch.search.lookup.SearchLookup;

import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * FlatObject field mapper.
 */
public final class FlatObjectFieldMapper extends FieldMapper {
    // taking some inspiration from ParentJoinFieldMapper

    public static final String NAME = "flat-object";
    public static final String CONTENT_TYPE = "flat-object";

    public static class Defaults {
        public static final FieldType FIELD_TYPE = new FieldType();

        static {
            // TODO: revisit field type properties
            FIELD_TYPE.setTokenized(false);
            FIELD_TYPE.setStored(true);
            FIELD_TYPE.setIndexOptions(IndexOptions.NONE);
            FIELD_TYPE.freeze();
        }
    }

    @Override
    protected void parseCreateField(ParseContext context) throws IOException {
        throw new UnsupportedOperationException("not implemented yet");
    }

    @Override
    protected void mergeOptions(FieldMapper other, List<String> conflicts) {
        throw new UnsupportedOperationException("not implemented yet");
    }

    public static class Builder extends FieldMapper.Builder<Builder> {

        protected Builder(String name) {
            super(name, Defaults.FIELD_TYPE);
            builder = this;
        }

        @Override
        public FlatObjectFieldMapper build(BuilderContext context) {
            return new FlatObjectFieldMapper(name, fieldType, new FlatObjectFieldType(name, meta), MultiFields.empty(), CopyTo.empty());
        }
    }

    public static class TypeParser implements Mapper.TypeParser {
        @Override
        public Mapper.Builder<?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException {
            Builder builder = new Builder(name);
            return builder;
        }
    }

    public static class FlatObjectFieldType extends SimpleMappedFieldType {

        protected FlatObjectFieldType(String name, Map<String, String> meta) {
            super(name, false, true, false, TextSearchInfo.NONE, meta);
        }

        @Override
        public ValueFetcher valueFetcher(QueryShardContext context, SearchLookup searchLookup, String format) {
            throw new IllegalArgumentException("Not implemented yet");
        }

        @Override
        public String typeName() {
            return CONTENT_TYPE;
        }

        @Override
        public Query termQuery(Object value, QueryShardContext context) {
            throw new IllegalArgumentException("Not implemented yet");
        }
    }

    // required ctor as generated by IDEA
    protected FlatObjectFieldMapper(
        String simpleName,
        FieldType fieldType,
        MappedFieldType mappedFieldType,
        MultiFields multiFields,
        CopyTo copyTo
    ) {
        super(simpleName, fieldType, mappedFieldType, multiFields, copyTo);
    }

    @Override
    protected String contentType() {
        return CONTENT_TYPE;
    }
}
